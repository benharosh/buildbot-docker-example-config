# -*- python -*-
# ex: set filetype=python:

import os
import json

from buildbot.util import bytes2unicode
from buildbot.plugins import *
# from .hooks import bitbuckethook

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### SECRETS
c['secretsProviders'] = [secrets.SecretInAFile(dirname="/buildbot/secrets")]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
# c['change_source'].append(changes.GitPoller(
#         'git://github.com/buildbot/pyflakes.git',
#         workdir='gitpoller-workdir', branch='master',
#         pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='refs/heads/master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='ssh://git@git.jfrog.info/iot/swamp-train-donkey.git', mode='incremental', branch='master',
    sshPrivateKey=util.Secret('id_rsa'), sshKnownHosts=util.Secret('known_hosts')))

factory.addStep(steps.ShellCommand(command=["ls"]))
# factory.addStep(steps.Git(repourl='ssh://git@git.jfrog.info/iot/swamp-train-donkey.git', mode='incremental'))
# factory.addStep(steps.ShellCommand(command=["git", "clone", "ssh://git@git.jfrog.info/iot/swamp-train-donkey.git"]))
# c['change_source'].append(changes.GitPoller(
#         'ssh://git@git.jfrog.info/iot/meta-mender-community.git',
#         branch='donkey', pollinterval=600, pollAtLaunch=True,
#         sshPrivateKey=util.Secret('id_rsa'),
#         sshKnownHosts=util.Secret('known_hosts'),
#         #nop=util.Secret('id_rsa.pub')
#         ))
#factory.addStep(steps.ShellCommand(command=[("ssh-agent", "bash", "-c", 'ssh-add '%(secret:id_rsa)s'; git clone ssh://git@git.jfrog.info/iot/swamp-train-donkey.git'")]))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["pip3", "install", "--user", "twine"]))
factory.addStep(steps.ShellCommand(command=["python3", "setup.py", "sdist"]))
factory.addStep(steps.ShellCommand(command=["/home/buildbot/.local/bin/twine", "upload", "--repository-url", "http://35.185.255.93/artifactory/api/pypi/swamp-python-local",
    "-u", util.Secret('user'), "-p", util.Secret('password'), "--disable-progress-bar", "dist/*"]))

# factory.addStep(steps.ShellCommand(command=["cp", "./dist/swamp-train-donkey-0.6.tar.gz", "~/tmp"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["example-worker"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

# setting bitbucket hook
# c['www']['change_hook_dialects'] = { 'bitbucket' : True } 
# c['www']['change_hook_dialects'] = change_hook_dialects={'bitbucketserver': {}}

class BitBucketHook(webhooks.base):
    def getChanges(self, request):
        print(util.Secret("user"))
        payload = self._get_payload(request)
        revision=payload['refChanges'][0]['toHash']

        for changeset in payload['changesets']['values']:
            if changeset['toCommit']['id'] ==  revision:
                revlink=changeset['links']['self'][0]['href'].rstrip('#README.md')
                author=changeset['toCommit']['author']['name']
                message=changeset['toCommit']['message']
                break

        chdict = dict(
                      revision=revision,
                      repository=payload['repository']['name'],
                      project=payload['repository']['project']['name'],
                      branch=payload['refChanges'][0]['refId'],
                      revlink=revlink,
                      author=author,
                      comments='Bitbucket Server Pull Request #{} . Commit comment: {}'.format(revision, message) 
                      )
        print('change payload data that was sent to db: {} '.format(chdict))             
        return ([chdict], None)

    def _get_payload(self, request):
        content = request.content.read()
        content = bytes2unicode(content)
        content_type = request.getHeader(b'Content-Type')
        content_type = bytes2unicode(content_type)
        if content_type.startswith('application/json'):
            payload = json.loads(content)
        else:
            raise ValueError('Unknown content type: {}'
                             .format(content_type))

        print("Payload: {}".format(payload))
        return payload

c['www']['change_hook_dialects'] = change_hook_dialects={ 'base' : { 'custom_class': BitBucketHook }}
# c['www']['change_hook_dialects'] = {'bitbucketcloud': {}}      

# c['www'] = dict(..., change_hook_dialects={ 'bitbucket' : True })

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

